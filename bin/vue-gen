#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
var meta = require('../lib/meta.js')
var path = require('path')
const fs = require('fs'),
    core = require('jhipster-core'),
    parse = core.parse,
    parseFromFiles = core.parseFromFiles

var cwd = process.cwd()

if (fs.existsSync(path.join(cwd, 'dsl'))) cwd = path.join(cwd, 'dsl')
if (fs.existsSync(path.join(cwd, '../../dsl'))) cwd = path.join(cwd, '../../dsl')
if (fs.existsSync(path.join(cwd, '../dsl'))) cwd = path.join(cwd, '../dsl')


fs.readdirSync(cwd).forEach((file, index) => {
    if (file.toLowerCase().endsWith('.jdl') || file.toLowerCase().endsWith('.jh')) {
        const input = fs.readFileSync(path.join(cwd, file), 'utf-8').toString()
        try {
            const content = parse(input)
            var com = new meta.com()
            com.code = file.split('.')[0]
            com.name = com.code
                // comcom.mainEntity = {};
            content.entities.forEach(function(entity) {
                //console.log("start generate  "+entity.name);
                if (entity.name.trim().toLowerCase().startsWith("doc")) {
                    com.main = new meta.doc();
                    setmainentity(com, entity);
                    let p1 = new meta.property()
                    p1.code = 'code';
                    p1.name = '编码';
                    com.main.propertylist.push(p1);
                    let p2 = new meta.property()
                    p2.code = 'name';
                    p2.name = '名称';
                    com.main.propertylist.push(p2);
                } else if (entity.name.trim().toLowerCase().startsWith("order")) {
                    com.main = new meta.order();
                    setmainentity(com, entity);
                    let p1 = new meta.property()
                    p1.code = 'orderno';
                    p1.name = '单号';
                    com.main.propertylist.push(p1);
                } else if (entity.name.trim().toLowerCase().startsWith("cross")) {
                    let cross = new meta.cross()
                    cross.code = entity.name.trim()
                    cross.name = entity.javadoc
                    entity.body.forEach(p => {
                        let property = new meta.property()
                        property.code = p.name
                        property.name = p.javadoc
                        sub.propertylist.push(property)
                    })
                    let p1 = new meta.property()
                    p1.code = 'front'
                    p1.name = '上游实体'
                    cross.propertylist.push(p1)
                    let p2 = new meta.property()
                    p2.code = 'backend'
                    p2.name = '下游实体'
                    cross.propertylist.push(p2)
                    com.crosslist.push(cross)
                } else if (entity.name.trim().toLowerCase().startsWith("sub")) {
                    let sub = new meta.sub()
                    sub.code = entity.name.substr(entity.name.indexOf('_') + 1, entity.name.length);
                    sub.name = entity.javadoc
                    entity.body.forEach(p => {
                        let property = new meta.property()
                        property.code = p.name
                        property.name = p.javadoc
                        sub.propertylist.push(property)
                    })
                    let property = new meta.property()
                    property.code = 'lineno'
                    property.name = '行号'
                    sub.propertylist.push(property)
                    com.sublist.push(sub);
                } else if (entity.name.trim().toLowerCase().startsWith("enum")) {
                    let enumeration = new meta.enumeration();
                    enumeration.code = entity.name.substr(entity.name.indexOf('_') + 1, entity.name.length);
                    enumeration.name = entity.javadoc;
                    entity.body.forEach(p => {
                        if (p.type.toString().toLowerCase().trim().startsWith('literal')) {
                            let s = new meta.literal()
                            s.code = p.name
                            s.name = p.javadoc
                            s.val = p.type.trim().toLowerCase().replace('literal', '')
                            enumeration.literallist.push(s)
                        }
                    });
                    com.enumlist.push(enumeration);
                } else if (entity.name.trim().toLowerCase() == "statemachine") {
                    com.statemachine.code = com.code + '_' + entity.name.trim();
                    com.statemachine.name = entity.javadoc;
                    entity.body.forEach(p => {
                        if (p.type.toString().toLowerCase().trim().startsWith('state')) {
                            let s = new meta.state()
                            s.code = p.name
                            s.name = p.javadoc
                            s.val = p.type.trim().toLowerCase().replace('state', '')
                            com.statemachine.statelist.push(s)
                        } else {
                            let t = new meta.transition()
                            t.code = p.name
                            t.name = p.javadoc
                            let fromstr = p.type.split('_')[0].toLowerCase()
                            let tostr = p.type.split('_')[1].toLowerCase()
                            t.fromstate = com.statemachine.statelist.find(p => p.code == fromstr).code
                            t.tostate = com.statemachine.statelist.find(p => p.code == tostr).code
                            com.statemachine.transitionlist.push(t)
                        }
                        if (com.statemachine.startstate == null) com.statemachine.startstate = com.statemachine.statelist[0];
                        if (com.statemachine.endstate == null) com.statemachine.endstate = com.statemachine.statelist[com.statemachine.statelist.length];
                    })
                } else {
                    console.error('entity命名错误 :' + entity.name);
                    throw new Error('异常退出');
                }
            }, this)

            fs.writeFileSync(genfilelog(path.join(cwd, com.code + '.meta.json')), JSON.stringify(com), 'utf-8')
            fs.writeFileSync(genfilelog(path.join(cwd, '..', 'vue', 'src', 'common', 'js', 'front.context.g.js')), fs.readFileSync(path.join(cwd, '..', 'com', 'front.context.js')));
            fs.writeFileSync(genfilelog(path.join(cwd, '..', 'web', 'src', 'common', 'js', 'front.context.g.js')), fs.readFileSync(path.join(cwd, '..', 'com', 'front.context.js')));
            fs.writeFileSync(genfilelog(path.join(cwd, '..', 'express', 'backend.context.g.js')), fs.readFileSync(path.join(cwd, '..', 'com', 'backend.context.js')));

            let targetpath = path.join(cwd, '..', 'express', com.code);

            if (!fs.existsSync(targetpath)) fs.mkdirSync(targetpath);
            fs.writeFileSync(genfilelog(path.join(targetpath, com.code + '.g.js')), require('../template/api_js.js').gen(com), 'utf-8');
            fs.writeFileSync(genfilelog(path.join(targetpath, com.code + '.es5.g.js')), require('../template/api_es5.js').gen(com), 'utf-8');
            if (!fs.existsSync(path.join(targetpath, com.code + '.ex.js')))
                fs.writeFileSync(genfilelog(path.join(targetpath, com.code + '.ex.js')), require('../template/api_exjs.js').gen(com), 'utf-8');

            targetpath = path.join(cwd, '../vue/src/components', com.code);
            if (!fs.existsSync(path.join(targetpath))) fs.mkdirSync(targetpath);
            fs.writeFileSync(genfilelog(path.join(targetpath, 'model' + '.g.js')), require('../template/vue_js.js').gen(com), 'utf-8');
            fs.writeFileSync(genfilelog(path.join(targetpath, 'edit' + '.g.vue')), require('../template/edit_mobile_vue.js').gen(com), 'utf-8');
            fs.writeFileSync(genfilelog(path.join(targetpath, 'list' + '.g.vue')), require('../template/list_mobile_vue.js').gen(com), 'utf-8');
            fs.writeFileSync(genfilelog(path.join(targetpath, 'ref' + '.g.vue')), require('../template/ref_mobile_vue.js').gen(com), 'utf-8');
            fs.writeFileSync(genfilelog(path.join(targetpath, 'view' + '.g.vue')), require('../template/view_mobile_vue.js').gen(com), 'utf-8');

            targetpath = path.join(cwd, '../web/src/components', com.code);
            if (!fs.existsSync(path.join(targetpath))) fs.mkdirSync(targetpath);
            fs.writeFileSync(genfilelog(path.join(targetpath, 'model.g.js')), require('../template/vue_js.js').gen(com), 'utf-8');
            fs.writeFileSync(genfilelog(path.join(targetpath, 'list.g.vue')), require('../template/list_web_vue.js').gen(com), 'utf-8');

        } catch (error) {
            console.log(file)
            console.log(JSON.stringify(com))
            console.log(error)
        }
    }
})

function genfilelog(filepath) {
    console.log('generate file :' + filepath);
    return filepath;
}

function setmainentity(com, entity) {
    com.main.code = entity.name.substr(entity.name.indexOf('_') + 1, entity.name.length);
    com.main.name = entity.javadoc
    entity.body.forEach(p => {
        let property = new meta.property()
        property.code = p.name
        property.name = p.javadoc
        com.main.propertylist.push(property)
    })

}