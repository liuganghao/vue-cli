#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
var meta = require('../lib/meta.js');
// var ejs = require('ejs')
const expect = require('chai').expect,
    fs = require('fs'),
    fail = expect.fail,
    core = require('jhipster-core'),
    parse = core.parse,
    parseFromFiles = core.parseFromFiles


const input = fs.readFileSync('./employee.jdl', 'utf-8').toString();
const content = parse(input);
//console.log(JSON.stringify(content));
let com = new meta.com();

com.code = "employee";
com.name = "employee";
// comcom.mainEntity = {};
content.entities.forEach(function(entity) {
    //console.log("start generate  "+entity.name);
    if (entity.name.toLowerCase().indexOf("main") == 0) {
        com.main.code = entity.name.substr(entity.name.indexOf('_') + 1, entity.name.length);
        com.main.name = entity.javadoc;
        entity.body.forEach(p => {
            let property = new meta.property();
            property.code = p.name;
            property.name = p.javadoc;
            com.main.propertylist.push(property)
        })

    } else if (entity.name.toLowerCase().indexOf("enum") == 0) {
        com.main.code = entity.name.substr(entity.name.indexOf('_') + 1, entity.name.length);
    } else if (entity.name.toLowerCase() == "statemachine") {
        com.statemachine.code = entity.name;
        com.statemachine.name = entity.javadoc;
    } else {
        let sub = new meta.subentity();
        sub.code = entity.name;
        sub.name = entity.javadoc;
        com.sublist.push(sub);
    }
}, this);

var str = `
//${com.main.name}
export class ${com.main.code} {
  constructor(...args) {
    this.${com.main.code}Data = {
`;

com.main.propertylist.forEach(p => {
    str += `${p.code}:'',//${p.name}
`
})
str += `    };
  }
`;

// +
//   "<%for (var index = 0; index < com.main.propertylist.length; index++) {" +
//   "var property = entity.body[index];%>" +
//   " <%= property.name%>:<%=property.type%> //property" +
//   "<%}" +
//   "%>}";
//var entityjsfile = ejs.render(str, { com: com });
console.log(str);